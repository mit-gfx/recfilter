{"name":"RecFilter","tagline":"Domain-specific language for IIR filters","body":"![Performance](http://www.mit.edu/~gchauras/recfilter_image.jpg)\r\n\r\nInfinite impulse response (IIR) or recursive filters, are essential for image processing because they\r\nturn expensive large-footprint convolutions into operations that have a constant cost per pixel regardless\r\nof kernel size. However, their recursive nature  constrains the order in which pixels can be computed,\r\nseverely limiting both parallelism within a filter and memory locality across multiple filters.\r\nPrior research has developed algorithms that can compute IIR filters with image tiles. Using a\r\ndivide-and-recombine strategy inspired by parallel prefix sum, they expose greater parallelism and\r\nexploit producer-consumer locality in pipelines of IIR filters over multi-dimensional images. While\r\nthe principles are simple, it is hard, given a recursive filter, to derive a corresponding tile-parallel\r\nalgorithm, and even harder to implement and debug it.\r\n\r\nWe show that parallel and locality-aware implementations of IIR filter pipelines can be obtained through\r\n*program transformations*, which we mechanize through a *domain-specific compiler*. We show that\r\nthe composition of a small set of transformations suffices to cover the space of possible strategies. We\r\nalso demonstrate that the tiled implementations can be automatically scheduled in hardware-specific manners using a\r\nsmall set of generic heuristics. The programmer specifies the basic recursive filters, and the choice of\r\ntransformation requires only a few lines of code. Our compiler then generates high-performance implementations\r\nthat are an order of magnitude faster than standard GPU implementations, and outperform hand tuned\r\ntiled implementations of specialized algorithms which require orders of magnitude more programming\r\neffort - a few lines of code instead of a few thousand lines per pipeline.\r\n\r\n## Publication\r\n**Compiling High Performance Recursive Filters** <br />\r\n[Gaurav Chaurasia], [Jonathan Ragan-Kelley], [Sylvain Paris], [George Drettakis], [Fredo Durand] <br />\r\n_High Performance Graphics 2015_ <br />\r\n\r\n  * [Paper]\r\n  * [Supplementary]\r\n  * [Code] (github repo to be made public soon after code cleanup)\r\n\r\n## Bibtex\r\n\r\n    @inproceedings{Chaurasia:2015,\r\n      author       = {Gaurav Chaurasia and Jonathan Ragan-Kelley and Sylvain Paris and George Drettakis and Fredo Durand},\r\n      title        = {Compiling High Performance Recursive Filters},\r\n      booktitle    = {High Performance Graphics},\r\n      year         = {2015},\r\n      doi          = {},\r\n      url          = {http://www-sop.inria.fr/reves/Basilic/2015/CRPDD15a/}\r\n    }\r\n\r\n## Acknowledgement\r\n\r\nWe thank [Qatar Computing Research Institute (QCRI)](http://www.qcri.org/) for research funding.\r\n\r\n[Gaurav Chaurasia]:     http://people.csail.mit.edu/gchauras\r\n[George Drettakis]:     http://www-sop.inria.fr/members/George.Drettakis/\r\n[Jonathan Ragan-Kelley]:http://people.csail.mit.edu/jrk\r\n[Sylvain Paris]:        http://people.csail.mit.edu/sparis\r\n[Fredo Durand]:         http://people.csail.mit.edu/fredo\r\n[Paper]:                http://www-sop.inria.fr/reves/Basilic/2015/CRPDD15a/recfilter.pdf\r\n[Supplementary]:        http://www-sop.inria.fr/reves/Basilic/2015/CRPDD15a/supplement.pdf\r\n[Code]:                 https://github.com/mit-gfx/recfilter\r\n\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}